plugins {
	id 'fabric-loom' version '1.10.1'
	id "com.modrinth.minotaur" version "2.+"
}

version = project.mod_version
group = project.maven_group

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

base {
	archivesName = project.archives_base_name
}

java {
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

modrinth {
	if (version.endsWith("SNAPSHOT")) // Not really elegant but will prevent publishing by error
		return
	token = System.getenv("MODRINTH_TOKEN")
	projectId = "d5BXxnVG"
	versionNumber = version.toString()
	versionType = "release"
	uploadFile = remapJar
	versionName = "HighLightItem " + version
	changelog = new File('./changelog.md').getText('UTF-8')
	dependencies {
		required.project "fabric-api"
	}
	if (debugMode.getOrElse(true) == false)
		cleanChangelog()
}

static def cleanChangelog() {
	new File('./changelog.md').setText("")
}
